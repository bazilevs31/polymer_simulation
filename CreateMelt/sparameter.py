#!/home/vasiliy/anaconda/bin/python

import numpy as np
import fortnew as ft  #f2py module for analyzing the traj(it should be in the path)
from MDAnalysis import *
import matplotlib.pyplot as plt   # side-stepping mpl's backend
import sys
import os
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess

# u=Universe("poly300.psf", "poly300.pdb")
# u=Universe("../data/poly_40.psf", "../data/wraptraj_40.dcd")


class traj(object):
    """docstring for traj"""
    def __init__(self,time, s, psffile):
        self.time = time
        self.s = s
        self.psffile = psffile
    def get_currdir(self):
        """
        get current directory if it exists
        if not make one and return it
        """
        print ("current directory is")
        print(os.getcwd() + "\n")
        curdir = os.getcwd()
        figuresdir = curdir+'/figures'
        if not os.path.exists(figuresdir):
            os.mkdir(figuresdir)
        self.curdir = curdir
        self.figuresdir = figuresdir        
    def plot_rdf(self):
        self.get_currdir()
        # plt.axhline(y=-0.2, xmin=0.0, xmax=self.time.max(), 'g--', linewidth=0.5)
        plt.xlabel(r'$\mathrm{time}$')
        plt.ylabel(r'$\mathrm{s}$')
        plt.grid(True)
        plt.title(r'$\mathrm{Crystallinity} } $'  )
        plt.plot(self.time, self.s, 'bo-', label='$s$',lw=1.5)
        plt.legend()
        plt.savefig(self.figuresdir + '/s' + self.psffile + '.pdf')
        np.savez(self.figuresdir + '/s' + self.psffile, self.time, self.s)
def read_parameters():
    """
    read parameters from the commandline
    input 
    output u, trajskip, endframe, psffile, Nsub, sthreshold
    """
    parser = ArgumentParser(description=__doc__,
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument("-f", "--psf", dest="psffile", help="Write psffile to file, no .psf required", metavar="FILE")
    parser.add_argument("-s", 
                    "--trajskip",
                    dest="trajskip", 
                    default=1, 
                    type=int, 
                    help="Skip of the trajectory file")
    parser.add_argument("-e", 
                    "--endframe",
                    dest="endframe", 
                    default=-1, 
                    type=int, 
                    help="End file of the trajectory file")
    parser.add_argument("-t", "--trajectory", dest="dcdinput", default="trajectory_nve.dcd",
                        type=lambda x: is_valid_file(parser, x),
                        help="write report to FILE", metavar="FILE")
    parser.add_argument("-d", "--data", dest="datafile", default="polymer_0.8.data",
            type=lambda x: is_valid_file(parser, x),
            help="read datafile", metavar="FILE")
    parser.add_argument("-g", 
                "--Nsub",
                dest="Nsub", 
                default=7, 
                type=int, 
                help="number of grid cells in each dimension")
    parser.add_argument("-l", 
                "--sthreshold",
                dest="sthreshold", 
                default=0.3, 
                type=float, 
                help="threshold for determining the crystalline domain")
    args = parser.parse_args()
    psffile = args.psffile
    trajskip = args.trajskip
    endframe = args.endframe
    dcdinput = args.dcdinput
    datafile = args.datafile
    Nsub = args.Nsub
    sthreshold = args.sthreshold

    print " I am here "
    psfpath = os.path.abspath(psffile+'.psf')
    if os.path.exists(psfpath)==True:
        u = Universe(psffile +".psf","trajSkipwrap.dcd")
        return u, trajskip, endframe , psffile,Nsub, sthreshold      
    elif os.path.exists(psfpath)==False:
        create_psf(datafile, dcdinput, trajskip,psffile+".psf")
        u = Universe(psffile +".psf","trajSkipwrap.dcd")
        return u, trajskip, endframe, psffile, Nsub, sthreshold
def is_valid_file(parser, arg):
    """
    Check if arg is a valid file 
    """
    arg = os.path.abspath(arg)
    if not os.path.exists(arg):
        parser.error("The file %s doesn't exist " % arg)
    else:
        return arg
def create_psf(datafile,dcdinput,trajskip,psffile):
    """given data file produce psf file, read-eidt dcd file"""
    curdir = os.getcwd()
    curdir = curdir+"/"
    filestring = " ".join(("create_list_cryst.sh",datafile,dcdinput,str(2),psffile,curdir))
    os.system(filestring)
    return 0

def get_s(u):
    """
    input u
    use coor - coordinates of bonds(chrods)
    generate a qab tensor of outer products
    gets uses coor of all bonds generated by get_bondlist_coords 
    returns qab tensor averaged for all atoms in the current frame
    """
    coor = get_bondlist_coords(u)
    nq = coor.shape[0]
    # print "nq = ", nq
    # qab = np.empty((3, 3),dtype='float32')
    # dij = np.eye(3,dtype='float32')
    qab = np.empty((3,3))
    dij = np.eye(3)
    qab = np.einsum('ij,ik->jk', coor, coor)
    s = 0.0
    qab = 1.5*qab / float(nq) - 0.5*dij
    s=np.sqrt(1.5*np.trace(qab*qab))
    return s
def get_bondlist_coords(u):
    """
    use universe of a domain
    generate normalized coordinates of bond vectors
    get universe , return bonds(coordinates)
    generate coor of all bonds(bond = chord i-1 - i+1 ), normalize it
    """
    angles = u.angles
    bonds = angles.atom3.positions - angles.atom1.positions 
    # coords = angles.atom2.positions
    norm = np.linalg.norm(bonds,axis=1)
    bonds /= norm[:, None] #the norm vector is a (nx1) and we have to create dummy directions -> (n,3)
    return bonds
def get_sfactor(u, Nsub=6, sthreshold=0.3):
    box = u.trajectory.ts.dimensions[:-3]
    length_x = box[-1]
    grid_1d=np.linspace(0.0,length_x,Nsub+1,endpoint=True)
    delta=grid_1d[1]-grid_1d[0]
    cryst=0.
    #ar_z is a planar selection
    for z in grid_1d[0:-1]:
        ar_z = u.selectAtoms("prop  z >= " + str(z) + "  and  prop z < " + str(z+delta) )
        #ater this step ar_y is a line
        for y in grid_1d[0:-1]:
            ar_y = ar_z.selectAtoms("prop  y >= " + str(y) + "  and  prop y < " + str(y+delta) )
            #ater this step ar_x is a dot
            for x in grid_1d[0:-1]:
                ar_x = ar_y.selectAtoms("prop  x >= " + str(x) + "  and  prop x < " + str(x+delta) )
                s = get_s(ar_x)
                if s>sthreshold :
                    cryst+=1.0
    cryst /= float(Nsub**3.0)
    cryst *= 100.0
    return cryst


def main():
    """
    main program input : psffile(no dimension), datafile(with dimension), dcdfile(with dimension), dcdskip(integer)
    """
    s = []
    time = []
    u, trajskip, endframe,psffile,Nsub,sthreshold = read_parameters()
    for ts in u.trajectory[1:endframe:trajskip]:
        order = get_sfactor(u, Nsub, sthreshold)
        print ts.frame, " order = ", order, " % "
        time.append(ts.frame)
        s.append(order)

    s = np.array(s); time = np.array(time)
    mytraj = traj(time, s, psffile)
    mytraj.plot_rdf()


if __name__ == '__main__':
    main()
